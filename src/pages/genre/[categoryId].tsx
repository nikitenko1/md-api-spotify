import { useSession } from "next-auth/react";
import { useRouter } from "next/router";
import React, { useEffect } from "react";
import spotifyApi from "../../lib/spotifyApi";
import { useQuery } from "@tanstack/react-query";
import Loader from "../../components/Loader";
import Head from "next/head";
import { v4 } from "uuid";
import PlaylistSearchItem from "../../components/PlaylistSearchItem";
import Body from "../../components/Body";

const GenrePage = () => {
  const router: any = useRouter();
  const { data: session } = useSession();
  const { accessToken }: any = session;

  useEffect(() => {
    if (!accessToken) return;
    // Set the access token on the API object to use it in later calls
    spotifyApi.setAccessToken(accessToken);
  }, [accessToken]);

  const fetchCategoryPlaylists = async () => {
    // Get a list of Spotify playlists tagged with a particular category.
    // http GET https://api.spotify.com/v1/browse/categories/dinner/playlists
    const res = await spotifyApi.getPlaylistsForCategory(router.query.categoryId, {
      limit: 40,
    });
    return res.body;
  };

  const { data, isLoading, isError } = useQuery(["categoryPlaylists"], fetchCategoryPlaylists, {
    staleTime: 100000,
    refetchOnWindowFocus: false,
  });

  if (isLoading)
    return (
      <div className="flex items-center justify-center">
        <Loader />
      </div>
    );

  if (isError) return <p className="">There's some error fetching the data</p>;
  return (
    <>
      <Head>
        <title>Genres - {router.query.categoryId} </title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Body>
        <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 gap-4">
          {data?.playlists.items.map((playlist) => (
            <PlaylistSearchItem playlist={playlist} key={v4()} />
          ))}
        </div>
      </Body>
    </>
  );
};

export default GenrePage;
