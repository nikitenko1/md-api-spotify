import { useRouter } from "next/router";
import React, { useEffect, useState } from "react";
import useHandlePlay from "../../hooks/useHandlePlay";
import spotifyApi from "../../lib/spotifyApi";
import { toast } from "react-hot-toast";
import { useQuery } from "@tanstack/react-query";
import Loader from "../../components/Loader";
import Container from "../../components/Container";
import Head from "next/head";
import Image from "next/legacy/image";
import PlayButton from "../../components/PlayButton";
import { FiMoreHorizontal } from "react-icons/fi";
import TrackAlbum from "../../components/TrackAlbum";
import { v4 } from "uuid";
import AlbumSearchItem from "../../components/AlbumSearchItem";
import ArtistsSearch from "../../components/ArtistsSearch";
import Body from "../../components/Body";

const ArtistPage = () => {
  const router: any = useRouter();
  const { artistId } = router.query;
  const [discography, setDiscography] = useState<string>("album");
  const handlePlay = useHandlePlay();
  const [seeAll, setSeeAll] = useState<boolean>(false);

  const fetchArtist = async () => {
    // Get Spotify catalog information for a single artist identified by their unique Spotify ID.
    // GET / artists / { id };
    const res = await spotifyApi.getArtist(artistId);
    return res.body;
  };

  const fetchRelatedArtist = async () => {
    // Get Spotify catalog information about artists similar to a given artist.
    // Similarity is based on analysis of the Spotify community's listening history.
    // GET /artists/{id}/related-artists
    const res = await spotifyApi.getArtistRelatedArtists(artistId);
    return res.body;
  };

  const fetchArtistAlbums = async () => {
    // Get Spotify catalog information about an artist's albums
    // GET /artists/{id}/albums
    const res = await spotifyApi.getArtistAlbums(artistId, {
      limit: 5,
    });
    return res.body;
  };

  const fetchArtistTopTracks = async () => {
    // Get Spotify catalog information about an artist's top tracks by country.
    // GET /artists/{id}/top-tracks
    const res = await spotifyApi.getArtistTopTracks(artistId, "US");
    return res.body;
  };

  const followArtist = async (artistId: any) => {
    // PUT /me/following
    // Add the current user as a follower of one or more artists or other Spotify users.
    const res = await spotifyApi.followArtists([artistId]);
    toast.success("Following ");
    return res.body;
  };

  const artist = useQuery(["fetchArtist"], fetchArtist);

  const artistTopTracks = useQuery(["fetchArtistTopTracks"], fetchArtistTopTracks);

  const relatedArtists = useQuery(["fetchRelatedArtists"], fetchRelatedArtist);

  const artistAlbums = useQuery(["fetchArtistAlbums"], fetchArtistAlbums);

  useEffect(() => {
    artist.refetch();
    artistTopTracks.refetch();
    relatedArtists.refetch();
    artistAlbums.refetch();
  }, [router]);

  if (artist.isLoading)
    return (
      <div className="flex items-center justify-center">
        <Loader />
      </div>
    );

  return (
    <>
      <Head>
        <title>Artist | {artist?.data?.name}</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Body>
        <Container>
          <div className="space-y-8">
            <div className="mt-4 flex items-center gap-x-4 flex-col md:flex-row space-y-4">
              <Image
                src={artist?.data?.images[1].url ?? ""}
                height={125}
                width={125}
                className="rounded-full"
                objectFit="contain"
                alt="artist"
              />
              <div className="flex flex-col space-y-4 text-center md:text-left">
                <p className="font-bold text-3xl md:text-6xl text-white">{artist?.data?.name}</p>
                <p className="text-gray-400">
                  {artist?.data?.followers.total.toLocaleString()} followers
                </p>
              </div>
            </div>
            <div className="p-4 flex items-center justify-center gap-x-6 md:justify-start">
              <PlayButton
                large={true}
                handlePlay={() => handlePlay(artist?.data)}
                item={artist?.data}
              />
              <button
                onClick={() => followArtist(artist?.data?.id)}
                className="md:px-4 px-2 py-1 md:py-2  text-gray-200 font-semibold uppercase 
            bg-transparent border-gray-200 border rounded-lg"
              >
                Follow
              </button>
              <FiMoreHorizontal className=" text-2xl md:text-4xl text-gray-400" />
            </div>
            <div>
              <h1 className="text-white text-2xl font-bold my-4">Popular</h1>
              {artistTopTracks?.data?.tracks
                .slice(0, seeAll ? artistTopTracks?.data?.tracks.length : 5)
                .map((track, i: number) => (
                  <TrackAlbum track={track} key={v4()} index={i + 1} />
                ))}
              <button
                className="uppercase font-bold text-gray-400 mt-4 whitespace-nowrap"
                onClick={() => setSeeAll(!seeAll)}
              >
                {seeAll ? "See less" : "See all"}
              </button>
            </div>
            <div>
              <ArtistsSearch title={"Fans also like"} artists={relatedArtists?.data?.artists} />
            </div>
            <div className="flex flex-col space-y-4">
              <h1 className="text-white">Discography</h1>
              <div className="flex gap-x-4 mb-4">
                <button
                  className={`rounded-full cursor-pointer px-4 py-2 ${
                    discography === "album" ? "bg-white text-black" : "text-white bg-zinc-900"
                  }`}
                  onClick={() => setDiscography("album")}
                >
                  Albums
                </button>
                <button
                  className={`rounded-full cursor-pointer px-4 py-2 ${
                    discography === "single" ? "bg-white text-black" : "text-white bg-zinc-900"
                  }`}
                  onClick={() => setDiscography("single")}
                >
                  Single and EP
                </button>
              </div>
              <div
                className="grid  overflow-x-scroll scrollbar-thumb-gray-800 scrollbar-thin scrollbar-track-gray-100 
           auto-cols-max grid-flow-col auto-rows-auto gap-x-2 mt-4"
              >
                {artistAlbums?.data?.items
                  .filter(
                    (album) => album.album_type === (discography === "album" ? "album" : "single")
                  )
                  .map((album) => (
                    <AlbumSearchItem key={v4()} album={album} />
                  ))}
              </div>
            </div>
          </div>
        </Container>
      </Body>
    </>
  );
};

export default ArtistPage;
